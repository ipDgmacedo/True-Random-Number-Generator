{
  "name": "True Random number Generator",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Olá tudo bem qual vai ser o numero aleatório de hoje ?(ex : 1 a 100)",
        "options": {
          "subtitle": "Mande para o chat o número minimo e o maximo para retornar um número aleatório",
          "title": "True random number Generator"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -544,
        -128
      ],
      "id": "bf4d1b54-27be-4dc3-b2f5-0ec0ad896c4e",
      "name": "When chat message received",
      "webhookId": "f00363ee-f929-45c5-a9e1-d135c08f1fcf",
      "retryOnFail": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "751411f0-a29c-4687-acd4-2a06f2cb40c0",
              "name": "chatInput",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -336,
        -128
      ],
      "id": "d5e8e5e5-eb8f-4587-af69-2470de0cb98b",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "\nconst outputs = items.map(item => {\n  // Tenta vários nomes comuns para o campo de entrada\n  const raw = item.json.chatInput ?? item.json.chatinput ?? item.json.text ?? item.json.message ?? '';\n\n  // Extrai todos os números inteiros (aceita negativos)\n  // A expressão regular -?\\d+ garante que apenas números inteiros sejam encontrados.\n  const found = String(raw).match(/-?\\d+/g);\n\n  // Se nenhum número for encontrado\n  if (!found || found.length === 0) {\n    return {\n      json: {\n        input: raw,\n        error: 'Nenhum número encontrado. Por favor, envie algo como \"1 a 100\" ou \"1-100\".'\n      }\n    };\n  }\n\n  // Se só houver um número, assume que é o valor máximo, com o mínimo sendo 1\n  let min, max;\n  if (found.length === 1) {\n    min = 1;\n    max = parseInt(found[0], 10);\n  } else {\n    min = parseInt(found[0], 10);\n    max = parseInt(found[1], 10);\n  }\n\n  // Verifica se a conversão para número falhou\n  if (Number.isNaN(min) || Number.isNaN(max)) {\n    return {\n      json: {\n        input: raw,\n        error: 'Erro ao converter os números extraídos. Certifique-se de que são números inteiros válidos.'\n      }\n    };\n  }\n  \n  // Se 'min' for maior que 'max', inverte os valores para garantir que o intervalo seja válido\n  if (min > max) {\n    [min, max] = [max, min];\n  }\n\n  // Proteção básica: evita ranges inválidos (por exemplo, um intervalo muito grande)\n  if (max - min > 1e9) {\n    return {\n      json: {\n        input: raw,\n        error: 'O intervalo é muito grande. Por favor, insira um intervalo menor.'\n      }\n    };\n  }\n\n  // Sorteia um número dentro do intervalo [min, max]\n  const sorteado = Math.floor(Math.random() * (max - min + 1)) + min;\n\n  return {\n    json: {\n      input: raw,\n      min,\n      max,\n      sorteado\n    }\n  };\n});\n\nreturn outputs;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -144,
        -128
      ],
      "id": "191d076a-b62c-48c3-9854-39d431bbb330",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6ebc8a8b-88e4-45c1-8686-94d0da8fdcb0",
              "name": "min",
              "value": "={{ $json.min }}",
              "type": "number"
            },
            {
              "id": "25a0726c-0a7f-4194-974b-32ff332cd08a",
              "name": "max",
              "value": "={{ $json.max }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        64,
        -128
      ],
      "id": "78ca0eb8-94a9-482d-9651-9437542c037c",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "url": "https://www.random.org/integers/",
        "responseFormat": "string",
        "options": {},
        "queryParametersUi": {
          "parameter": [
            {
              "name": "num",
              "value": "={{ $json[\"num\"] || 1 }}"
            },
            {
              "name": "min",
              "value": "={{ $json[\"min\"] || 1 }}"
            },
            {
              "name": "max",
              "value": "={{ $json[\"max\"] || 100 }}"
            },
            {
              "name": "col",
              "value": "1"
            },
            {
              "name": "base",
              "value": "10"
            },
            {
              "name": "format",
              "value": "plain"
            },
            {
              "name": "rnd",
              "value": "new"
            }
          ]
        }
      },
      "id": "14e52b92-636c-494b-8a18-c521b77beca0",
      "name": "Get Integers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        288,
        -128
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Get Integers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Integers": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3e50baa3-19fe-429f-9af0-aecab0b12627",
  "meta": {
    "instanceId": "241cbcf84f641924d9a06c8213358cac98bdaf3e1a9885700aed61fa5386e271"
  },
  "id": "klEPATriQP3bR2QJ",
  "tags": []
}